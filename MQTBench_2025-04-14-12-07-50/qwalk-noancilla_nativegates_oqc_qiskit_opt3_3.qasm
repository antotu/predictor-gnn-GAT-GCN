// Benchmark was created by MQT Bench on 2024-03-19
// For more information about MQT Bench, please visit https://www.cda.cit.tum.de/mqtbench/
// MQT Bench version: 1.1.0
// Qiskit version: 1.0.2
// Used Gate Set: ['rz', 'sx', 'x', 'ecr', 'measure', 'barrier']

OPENQASM 2.0;
include "qelib1.inc";
opaque ecr q0,q1;
qreg node[2];
qreg coin[1];
creg meas[3];
sx node[0];
rz(pi/2) node[0];
rz(-pi/2) node[1];
ecr node[1],node[0];
rz(3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
x node[1];
rz(-pi/2) node[1];
rz(pi/2) coin[0];
sx coin[0];
ecr coin[0],node[0];
rz(-3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
ecr node[1],node[0];
rz(3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
rz(-3*pi/4) node[1];
sx node[1];
rz(2.1587989303424635) node[1];
x coin[0];
rz(-pi/2) coin[0];
ecr coin[0],node[0];
rz(-3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
rz(-0.32175055439664213) coin[0];
sx coin[0];
rz(-pi/2) coin[0];
ecr node[1],coin[0];
rz(-2.553590050042226) node[1];
sx node[1];
rz(pi/4) node[1];
ecr node[1],node[0];
rz(3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
x node[1];
rz(-pi/2) node[1];
rz(-pi/2) coin[0];
sx coin[0];
rz(-0.46364760900080704) coin[0];
ecr coin[0],node[0];
rz(-3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
ecr node[1],node[0];
rz(3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
rz(-3*pi/4) node[1];
sx node[1];
rz(1.1385195921285423) node[1];
x coin[0];
rz(-pi/2) coin[0];
ecr coin[0],node[0];
rz(-3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
rz(-0.32175055439664213) coin[0];
sx coin[0];
rz(-pi/2) coin[0];
ecr node[1],coin[0];
rz(2.709315918923437) node[1];
sx node[1];
rz(pi/4) node[1];
ecr node[1],node[0];
rz(3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
x node[1];
rz(-pi/2) node[1];
rz(-pi/2) coin[0];
sx coin[0];
rz(2.677945044588986) coin[0];
sx coin[0];
ecr coin[0],node[0];
rz(-3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
ecr node[1],node[0];
rz(3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
rz(-3*pi/4) node[1];
sx node[1];
rz(2.1587989303424635) node[1];
x coin[0];
rz(-pi/2) coin[0];
ecr coin[0],node[0];
rz(-3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
rz(-0.32175055439664213) coin[0];
sx coin[0];
rz(-pi/2) coin[0];
ecr node[1],coin[0];
rz(-2.553590050042226) node[1];
sx node[1];
rz(pi/4) node[1];
ecr node[1],node[0];
rz(3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
x node[1];
rz(-pi/2) node[1];
rz(-pi/2) coin[0];
sx coin[0];
rz(-0.46364760900080704) coin[0];
ecr coin[0],node[0];
rz(-3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
ecr node[1],node[0];
rz(3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
rz(-3*pi/4) node[1];
sx node[1];
rz(1.1385195921285423) node[1];
x coin[0];
rz(-pi/2) coin[0];
ecr coin[0],node[0];
rz(-3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
rz(-0.32175055439664213) coin[0];
sx coin[0];
rz(-pi/2) coin[0];
ecr node[1],coin[0];
rz(2.709315918923437) node[1];
sx node[1];
rz(pi/4) node[1];
ecr node[1],node[0];
rz(3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
x node[1];
rz(-pi/2) node[1];
rz(-pi/2) coin[0];
sx coin[0];
rz(2.677945044588986) coin[0];
sx coin[0];
ecr coin[0],node[0];
rz(-3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
ecr node[1],node[0];
rz(3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
rz(-3*pi/4) node[1];
sx node[1];
rz(2.1587989303424635) node[1];
x coin[0];
rz(-pi/2) coin[0];
ecr coin[0],node[0];
rz(-3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
rz(-0.32175055439664213) coin[0];
sx coin[0];
rz(-pi/2) coin[0];
ecr node[1],coin[0];
rz(-2.553590050042226) node[1];
sx node[1];
rz(pi/4) node[1];
ecr node[1],node[0];
rz(3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
x node[1];
rz(-pi/2) node[1];
rz(-pi/2) coin[0];
sx coin[0];
rz(-0.46364760900080704) coin[0];
ecr coin[0],node[0];
rz(-3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
ecr node[1],node[0];
rz(3*pi/4) node[0];
sx node[0];
rz(-pi) node[0];
rz(-3*pi/4) node[1];
sx node[1];
rz(1.1516776788573573) node[1];
x coin[0];
rz(-pi/2) coin[0];
ecr coin[0],node[0];
rz(3*pi/4) node[0];
sx node[0];
rz(pi/2) node[0];
rz(-0.32175055439664213) coin[0];
sx coin[0];
rz(-pi/2) coin[0];
ecr node[1],coin[0];
rz(2.722474005652254) node[1];
sx node[1];
rz(3*pi/4) node[1];
rz(-pi/2) coin[0];
sx coin[0];
rz(1.1071487177940895) coin[0];
barrier node[0],node[1],coin[0];
measure node[0] -> meas[0];
measure node[1] -> meas[1];
measure coin[0] -> meas[2];